version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - auth-service
      - user-service
      - hotel-service
      - room-service
      - reservation-service
      - payment-service
      - review-service
      - notification-service
      - report-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=3001
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3002
      - HOTEL_SERVICE_HOST=hotel-service
      - HOTEL_SERVICE_PORT=3003
      - ROOM_SERVICE_HOST=room-service
      - ROOM_SERVICE_PORT=3004
      - RESERVATION_SERVICE_HOST=reservation-service
      - RESERVATION_SERVICE_PORT=3005
      - PAYMENT_SERVICE_HOST=payment-service
      - PAYMENT_SERVICE_PORT=3006
      - REVIEW_SERVICE_HOST=review-service
      - REVIEW_SERVICE_PORT=3007
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3008
      - REPORT_SERVICE_HOST=report-service
      - REPORT_SERVICE_PORT=3009
    networks:
      - reservation-network

  # Authentication Service
  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - db
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3001
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
    networks:
      - reservation-network

  # User Service
  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      - db
      - auth-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3002
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=3001
    networks:
      - reservation-network

  # Hotel Service
  hotel-service:
    build:
      context: .
      dockerfile: ./hotel-service/Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      - db
      - auth-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3003
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - AUTH_SERVICE_HOST=auth-service
      - AUTH_SERVICE_PORT=3001
    networks:
      - reservation-network

  # Room Service
  room-service:
    build:
      context: .
      dockerfile: ./room-service/Dockerfile
    ports:
      - "3004:3004"
    depends_on:
      - db
      - hotel-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3004
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - HOTEL_SERVICE_HOST=hotel-service
      - HOTEL_SERVICE_PORT=3003
    networks:
      - reservation-network

  # Reservation Service
  reservation-service:
    build:
      context: .
      dockerfile: ./reservation-service/Dockerfile
    ports:
      - "3005:3005"
    depends_on:
      - db
      - room-service
      - user-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3005
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - ROOM_SERVICE_HOST=room-service
      - ROOM_SERVICE_PORT=3004
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3002
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3008
    networks:
      - reservation-network

  # Payment Service
  payment-service:
    build:
      context: .
      dockerfile: ./payment-service/Dockerfile
    ports:
      - "3006:3006"
    depends_on:
      - db
      - reservation-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3006
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - RESERVATION_SERVICE_HOST=reservation-service
      - RESERVATION_SERVICE_PORT=3005
      - NOTIFICATION_SERVICE_HOST=notification-service
      - NOTIFICATION_SERVICE_PORT=3008
    networks:
      - reservation-network

  # Review Service
  review-service:
    build:
      context: .
      dockerfile: ./review-service/Dockerfile
    ports:
      - "3007:3007"
    depends_on:
      - db
      - hotel-service
      - user-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3007
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - HOTEL_SERVICE_HOST=hotel-service
      - HOTEL_SERVICE_PORT=3003
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=3002
    networks:
      - reservation-network

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: ./notification-service/Dockerfile
    ports:
      - "3008:3008"
    depends_on:
      - db
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3008
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - TWILIO_ACCOUNT_SID=your_twilio_account_sid
      - TWILIO_AUTH_TOKEN=your_twilio_auth_token
      - TWILIO_PHONE_NUMBER=your_twilio_phone_number
      - SMTP_HOST=smtp.example.com
      - SMTP_PORT=587
      - SMTP_USER=your_smtp_user
      - SMTP_PASSWORD=your_smtp_password
      - EMAIL_FROM=noreply@example.com
    networks:
      - reservation-network

  # Report Service
  report-service:
    build:
      context: .
      dockerfile: ./report-service/Dockerfile
    ports:
      - "3009:3009"
    depends_on:
      - db
      - hotel-service
      - reservation-service
    environment:
      - NODE_ENV=development
      - PORT=3000
      - MICROSERVICE_PORT=3009
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=admin123
      - DB_DATABASE=reservations
      - JWT_SECRET=supersecretjwtkey
      - JWT_EXPIRES_IN=24h
      - HOTEL_SERVICE_HOST=hotel-service
      - HOTEL_SERVICE_PORT=3003
      - RESERVATION_SERVICE_HOST=reservation-service
      - RESERVATION_SERVICE_PORT=3005
    networks:
      - reservation-network

  # Database
  db:
    image: mysql:8
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=admin123
      - MYSQL_DATABASE=reservations
    volumes:
      - mysql-data:/var/lib/mysql
      - ../database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reservation-network

  # Database Admin Tool
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8080:80"
    environment:
      - PMA_HOST=db
      - MYSQL_ROOT_PASSWORD=admin123
    depends_on:
      - db
    networks:
      - reservation-network

volumes:
  mysql-data:

networks:
  reservation-network:
    driver: bridge