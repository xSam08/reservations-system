import { IsOptional, IsString } from 'class-validator';

export class BasicDto {
  @IsOptional()
  @IsString()
  id?: string;
}
// Service-specific DTOs will be added here
import { IsOptional, IsString, IsDateString, IsNumber, IsEnum, IsArray, Min, Max } from 'class-validator';
import { Type, Transform } from 'class-transformer';

export class HotelSearchDto {
  @IsOptional()
  @IsString()
  location?: string;
  city?: string;
  country?: string;
  @IsDateString()
  checkInDate?: string;
  checkOutDate?: string;
  @IsNumber()
  @Min(1)
  @Max(10)
  @Type(() => Number)
  guests?: number;
  @Max(5)
  rooms?: number;
  @Min(0)
  minPrice?: number;
  maxPrice?: number;
  minRating?: number;
  @IsArray()
  @IsString({ each: true })
  @Transform(({ value }) => typeof value === 'string' ? value.split(',') : value)
  amenities?: string[];
  @IsEnum(['BUDGET', 'ECONOMY', 'COMFORT', 'LUXURY', 'PREMIUM'])
  category?: string;
  sortBy?: string; // price_asc, price_desc, rating_desc, name_asc
  page?: number;
  @Max(50)
  limit?: number;
}
export class RoomSearchDto {
  hotelId: string;
  roomType?: string;
  sortBy?: string; // price_asc, price_desc, capacity_asc, capacity_desc
export class SearchSuggestionsDto {
  query: string;
  @IsEnum(['hotels', 'cities', 'locations'])
  type?: string;
  @Max(20)
export class SearchResponseDto {
  data: any[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
  filters?: {
    locations: string[];
    priceRange: { min: number; max: number };
    amenities: string[];
    categories: string[];
    ratings: number[];
  };
import { NestFactory } from '@nestjs/core';
import { ValidationPipe } from '@nestjs/common';
import { SwaggerModule, DocumentBuilder } from '@nestjs/swagger';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalPipes(new ValidationPipe({ transform: true }));
  
  app.enableCors({
    origin: process.env.CORS_ORIGIN || '*',
    credentials: true,
  });
  const config = new DocumentBuilder()
    .setTitle('Search Service API')
    .setDescription('Hotel and room search service')
    .setVersion('1.0')
    .addBearerAuth()
    .build();
  const document = SwaggerModule.createDocument(app, config);
  SwaggerModule.setup('api-docs', app, document);
  const port = process.env.PORT || 3010;
  await app.listen(port);
  console.log(`Search Service running on port ${port}`);
}
bootstrap();
import { Injectable, CanActivate, ExecutionContext, UnauthorizedException } from '@nestjs/common';

@Injectable()
export class AuthGuard implements CanActivate {
  canActivate(context: ExecutionContext): boolean {
    const request = context.switchToHttp().getRequest();
    const userId = request.headers['x-user-id'];
    const userEmail = request.headers['x-user-email'];
    const userRole = request.headers['x-user-role'];
    if (!userId || !userEmail || !userRole) {
      throw new UnauthorizedException('Missing authentication headers');
    }
    request.user = {
      userId,
      email: userEmail,
      role: userRole
    };
    return true;
  }
}
import { ResponseUtil } from "../common/response.util";
import { ApiResponse } from './types';

export class ResponseUtil {
  static success<T>(data: T, message?: string): ApiResponse<T> {
    return {
      success: true,
      data,
      message
    };
  }
  static error(message: string, errors?: string[]): ApiResponse {
      success: false,
      message,
      errors
}
import { PaginationParams, PaginatedResponse } from './types';

export class PaginationUtil {
  static calculateOffset(page: number, limit: number): number {
    return (page - 1) * limit;
  }
  static createPaginatedResponse<T>(
    data: T[], 
    total: number, 
    params: PaginationParams
  ): PaginatedResponse<T> {
    const page = params.page || 1;
    const limit = params.limit || 10;
    const totalPages = Math.ceil(total / limit);
    return {
      data,
      total,
      page,
      limit,
      totalPages
    };
  static getSkipTake(params: PaginationParams): { skip: number; take: number } {
    const skip = (page - 1) * limit;
    
    return { skip, take: limit };
}
export enum UserRole {
  CUSTOMER = 'CUSTOMER',
  HOTEL_ADMIN = 'HOTEL_ADMIN',
  SYSTEM_ADMIN = 'SYSTEM_ADMIN'
}

export enum ReservationStatus {
  PENDING = 'PENDING',
  CONFIRMED = 'CONFIRMED',
  CANCELLED = 'CANCELLED',
  COMPLETED = 'COMPLETED'
export enum NotificationType {
  RESERVATION = 'RESERVATION',
  PAYMENT = 'PAYMENT',
  REVIEW = 'REVIEW',
  SYSTEM = 'SYSTEM'
export enum PaymentStatus {
  COMPLETED = 'COMPLETED',
  FAILED = 'FAILED',
  REFUNDED = 'REFUNDED'
export interface JwtPayload {
  userId: string;
  email: string;
  role: string;
  iat?: number;
  exp?: number;
}

export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  message?: string;
  errors?: string[];
export interface PaginationParams {
  page?: number;
  limit?: number;
  sortBy?: string;
  sortOrder?: 'asc' | 'desc';
export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  totalPages: number;
import { Injectable, BadRequestException } from '@nestjs/common';
import { HotelSearchDto, RoomSearchDto, SearchSuggestionsDto, SearchResponseDto } from '../dto/search.dto';

@Injectable()
export class SearchService {
  constructor() {}
  async searchHotels(searchDto: HotelSearchDto): Promise<SearchResponseDto> {
    try {
      // Mock implementation - replace with actual hotel service calls
      const mockHotels = [
        {
          hotelId: '1',
          name: 'Grand Hotel',
          city: searchDto.city || 'Demo City',
          rating: 4.5,
          basePrice: 150,
          category: 'LUXURY'
        },
          hotelId: '2',
          name: 'Budget Inn',
          rating: 3.2,
          basePrice: 80,
          category: 'BUDGET'
        }
      ];
      // Apply basic filters
      let filteredHotels = mockHotels;
      
      if (searchDto.minPrice) {
        filteredHotels = filteredHotels.filter(h => h.basePrice >= searchDto.minPrice!);
      }
      if (searchDto.maxPrice) {
        filteredHotels = filteredHotels.filter(h => h.basePrice <= searchDto.maxPrice!);
      if (searchDto.minRating) {
        filteredHotels = filteredHotels.filter(h => h.rating >= searchDto.minRating!);
      if (searchDto.category) {
        filteredHotels = filteredHotels.filter(h => h.category === searchDto.category);
      const page = searchDto.page || 1;
      const limit = searchDto.limit || 10;
      const startIndex = (page - 1) * limit;
      const endIndex = startIndex + limit;
      return {
        data: filteredHotels.slice(startIndex, endIndex),
        total: filteredHotels.length,
        page,
        limit,
        totalPages: Math.ceil(filteredHotels.length / limit),
        filters: {
          locations: ['Demo City', 'Another City'],
          priceRange: { min: 50, max: 500 },
          amenities: ['WiFi', 'Pool', 'Spa', 'Gym'],
          categories: ['BUDGET', 'ECONOMY', 'COMFORT', 'LUXURY', 'PREMIUM'],
          ratings: [5, 4, 3, 2, 1]
      };
    } catch (error) {
      console.error('Hotel search error:', error);
      throw new BadRequestException('Failed to search hotels');
    }
  }
  async searchRooms(searchDto: RoomSearchDto): Promise<SearchResponseDto> {
      // Mock implementation - replace with actual room service calls
      const mockRooms = [
          roomId: '1',
          hotelId: searchDto.hotelId,
          name: 'Standard Room',
          roomType: 'STANDARD',
          capacity: 2,
          basePrice: 120,
          amenities: ['WiFi', 'TV']
          roomId: '2',
          name: 'Deluxe Suite',
          roomType: 'SUITE',
          capacity: 4,
          basePrice: 250,
          amenities: ['WiFi', 'TV', 'Balcony', 'Minibar']
      let filteredRooms = mockRooms;
        filteredRooms = filteredRooms.filter(r => r.basePrice >= searchDto.minPrice!);
        filteredRooms = filteredRooms.filter(r => r.basePrice <= searchDto.maxPrice!);
      if (searchDto.guests) {
        filteredRooms = filteredRooms.filter(r => r.capacity >= searchDto.guests!);
      if (searchDto.roomType) {
        filteredRooms = filteredRooms.filter(r => r.roomType === searchDto.roomType);
        data: filteredRooms.slice(startIndex, endIndex),
        total: filteredRooms.length,
        totalPages: Math.ceil(filteredRooms.length / limit)
      console.error('Room search error:', error);
      throw new BadRequestException('Failed to search rooms');
  async getSearchSuggestions(suggestionsDto: SearchSuggestionsDto): Promise<{ suggestions: string[] }> {
      const { query, type = 'hotels', limit = 10 } = suggestionsDto;
      // Mock suggestions based on type
      let suggestions: string[] = [];
      if (type === 'hotels') {
        suggestions = [
          'Grand Hotel',
          'Budget Inn',
          'Luxury Resort',
          'City Center Hotel',
          'Beach Resort'
        ].filter(name => name.toLowerCase().includes(query.toLowerCase()));
      } else if (type === 'cities') {
          'New York',
          'Los Angeles',
          'Chicago',
          'Miami',
          'San Francisco'
        ].filter(city => city.toLowerCase().includes(query.toLowerCase()));
      } else if (type === 'locations') {
          'Downtown',
          'Airport',
          'Beach Area',
          'City Center',
          'Business District'
        ].filter(location => location.toLowerCase().includes(query.toLowerCase()));
        suggestions: suggestions.slice(0, limit)
      console.error('Search suggestions error:', error);
      return { suggestions: [] };
}
import { Module } from '@nestjs/common';
import { SearchController } from './controllers/search.controller';
import { SearchService } from './services/search.service';

@Module({
  imports: [],
  controllers: [SearchController],
  providers: [SearchService],
})
export class AppModule {}
import { ResponseUtil } from "../common/response.util";
import { Controller, Get, Post, Query, Body } from '@nestjs/common';
import { ApiTags, ApiOperation, ApiResponse, ApiQuery } from '@nestjs/swagger';
import { SearchService } from '../services/search.service';
import { HotelSearchDto, RoomSearchDto, SearchSuggestionsDto } from '../dto/search.dto';

@ApiTags('Search')
@Controller('search')
export class SearchController {
  constructor(private readonly searchService: SearchService) {}
  @Get('hotels')
  @ApiOperation({ summary: 'Search hotels with filters' })
  @ApiResponse({ status: 200, description: 'Hotels retrieved successfully' })
  @ApiResponse({ status: 400, description: 'Bad request' })
  async searchHotels(@Query() searchDto: HotelSearchDto) {
    try {
      const result = await this.searchService.searchHotels(searchDto);
      return ResponseUtil.success(result, 'Hotels retrieved successfully');
    } catch (error: any) {
      return ResponseUtil.error(error.message);
    }
  }
  @Get('rooms')
  @ApiOperation({ summary: 'Search rooms within a hotel' })
  @ApiResponse({ status: 200, description: 'Rooms retrieved successfully' })
  @ApiQuery({ name: 'hotelId', required: true, description: 'Hotel ID' })
  async searchRooms(@Query() searchDto: RoomSearchDto) {
      const result = await this.searchService.searchRooms(searchDto);
      return ResponseUtil.success(result, 'Rooms retrieved successfully');
  @Get('suggestions')
  @ApiOperation({ summary: 'Get search suggestions' })
  @ApiResponse({ status: 200, description: 'Suggestions retrieved successfully' })
  @ApiQuery({ name: 'query', required: true, description: 'Search query' })
  @ApiQuery({ name: 'type', required: false, enum: ['hotels', 'cities', 'locations'], description: 'Suggestion type' })
  @ApiQuery({ name: 'limit', required: false, description: 'Maximum number of suggestions' })
  async getSearchSuggestions(@Query() suggestionsDto: SearchSuggestionsDto) {
      const result = await this.searchService.getSearchSuggestions(suggestionsDto);
      return ResponseUtil.success(result, 'Suggestions retrieved successfully');
  @Post('hotels')
  @ApiOperation({ summary: 'Advanced hotel search with complex filters' })
  async advancedHotelSearch(@Body() searchDto: HotelSearchDto) {
  @Post('rooms')
  @ApiOperation({ summary: 'Advanced room search with complex filters' })
  async advancedRoomSearch(@Body() searchDto: RoomSearchDto) {
}
