services:
  # Database Services
  mysql:
    image: mysql:8.0
    container_name: reservations-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: reservations
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: reservations-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: reservations-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - JWT_SECRET=your-secret-key
      - AUTH_SERVICE_URL=http://auth-service:3001
      - USER_SERVICE_URL=http://user-service:3002
      - HOTEL_SERVICE_URL=http://hotel-service:3003
      - RESERVATION_SERVICE_URL=http://reservation-service:3004
      - SEARCH_SERVICE_URL=http://search-service:3010
      - AVAILABILITY_SERVICE_URL=http://availability-service:3005
    depends_on:
      auth-service:
        condition: service_healthy
      hotel-service:
        condition: service_healthy
      reservation-service:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      timeout: 10s
      retries: 5

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: reservations-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      timeout: 10s
      retries: 5

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: reservations-user-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      timeout: 10s
      retries: 5

  # Hotel Service
  hotel-service:
    build:
      context: ./hotel-service
      dockerfile: Dockerfile
    container_name: reservations-hotel-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      timeout: 10s
      retries: 5

  # Reservation Service
  reservation-service:
    build:
      context: ./reservation-service
      dockerfile: Dockerfile
    container_name: reservations-reservation-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      timeout: 10s
      retries: 5

  # Search Service
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: reservations-search-service
    restart: unless-stopped
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3010/health"]
      timeout: 10s
      retries: 5

  # Availability Service
  availability-service:
    build:
      context: ./availability-service
      dockerfile: Dockerfile
    container_name: reservations-availability-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USERNAME=root
      - DB_PASSWORD=root_password
      - DB_DATABASE=reservations
      - JWT_SECRET=your-secret-key
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - reservations-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      timeout: 10s
      retries: 5

volumes:
  mysql_data:

networks:
  reservations-network:
    external: true
    name: reservations-system_reservations-network